{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/shared/temperature-converter-service.service.ts","webpack:///src/app/temperature-coverter/temperature-coverter.component.ts","webpack:///src/app/temperature-coverter/temperature-coverter.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","TemperatureConverterService","http","baseUrl","caseNumber","valueToConvert","get","providedIn","TemperatureCoverterComponent","fb","temperatureConverterService","isSubmitted","tempratureForm","group","temperature","required","temperatureInput","valid","getConvertedValues","Number","value","subscribe","convertedValue","onSubmit","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { TemperatureCoverterComponent } from './temperature-coverter/temperature-coverter.component';\n\n\nconst routes: Routes = [{ path: 'temperature-converter', component: TemperatureCoverterComponent }];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'temperature-coverter-web';\n}\n","<app-temperature-coverter></app-temperature-coverter>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { TemperatureCoverterComponent } from './temperature-coverter/temperature-coverter.component';\nimport { TemperatureConverterService } from './shared/temperature-converter-service.service';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TemperatureCoverterComponent\n  ],\n  imports: [\n    BrowserModule,\n    ReactiveFormsModule,\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TemperatureConverterService {\n  public baseUrl = 'http://localhost:51690/api/temperature';\n  constructor(public http: HttpClient) { }\n\n  public getConvertedValues(caseNumber: number, valueToConvert: number): Observable<any> {\n    return this.http.get(`${this.baseUrl}?caseValue=${caseNumber}&valueToConvert=${valueToConvert}`);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { TemperatureConverterService } from '../shared/temperature-converter-service.service';\n\n@Component({\n  selector: 'app-temperature-coverter',\n  templateUrl: './temperature-coverter.component.html',\n  styleUrls: ['./temperature-coverter.component.scss']\n})\nexport class TemperatureCoverterComponent implements OnInit {\n\n  isSubmitted = false;\n  tempratureForm: FormGroup;\n  convertedValue: number;\n\n  constructor(public fb: FormBuilder, public temperatureConverterService: TemperatureConverterService) {\n    this.tempratureForm = this.fb.group({\n      temperature: ['temperature', [Validators.required]],\n      temperatureInput: [[], [Validators.required]]\n    })\n\n  }\n\n  ngOnInit() { }\n\n\n\n  // Getter method to access form control\n  get myForm() {\n    return this.tempratureForm.get('temperature');\n  }\n\n  // Submit Form\n  public onSubmit() {\n    this.isSubmitted = true;\n    if (!this.tempratureForm.valid) {\n      return false;\n    } else {\n      // alert(JSON.stringify(this.tempratureForm.value))\n      this.temperatureConverterService.getConvertedValues(Number(this.tempratureForm.value.temperature), Number(this.tempratureForm.value.temperatureInput)).subscribe((convertedValue) => {\n        this.convertedValue = convertedValue;\n      });\n    }\n  }\n\n}\n","<div class=\"jumbotron text-center\">\n    <h1 class=\"display-5\">\n        Temperature Converter Angular Application\n    </h1>\n</div>\n\n<div class=\"container\">\n    <div class=\"row custom-wrapper\">\n        <div class=\"col-md-12\">\n\n            <form [formGroup]=\"tempratureForm\" (ngSubmit)=\"onSubmit()\">\n\n                <div class=\"group-gap\">\n                    <h5 class=\"mb-3\">Temperature type</h5>\n                    <div class=\"d-block my-3\">\n\n                        <div class=\"custom-control custom-radio\">\n                            <input id=\"Celcius to Faranheit\" type=\"radio\" class=\"custom-control-input\" value=1\n                                name=\"temperature\" formControlName=\"temperature\">\n                            <label class=\"custom-control-label\" for=\"Celcius to Faranheit\">Celcius to Faranheit</label>\n                        </div>\n\n                        <div class=\"custom-control custom-radio\">\n                            <input id=\"Celcius to Kelvin\" type=\"radio\" class=\"custom-control-input\" value=2\n                                name=\"temperature\" formControlName=\"temperature\">\n                            <label class=\"custom-control-label\" for=\"Celcius to Kelvin\">Celcius to Kelvin</label>\n                        </div>\n\n                        <div class=\"custom-control custom-radio\">\n                            <input id=\"Faranheit to Celcius\" type=\"radio\" class=\"custom-control-input\" value=3\n                                name=\"temperature\" formControlName=\"temperature\">\n                            <label class=\"custom-control-label\" for=\"Faranheit to Celcius\">Faranheit to Celcius</label>\n                        </div>\n\n                        <div class=\"custom-control custom-radio\">\n                            <input id=\"Faranheit to Kelvin\" type=\"radio\" class=\"custom-control-input\" value=4\n                                name=\"temperature\" formControlName=\"temperature\">\n                            <label class=\"custom-control-label\" for=\"Faranheit to Kelvin\">Faranheit to Kelvin</label>\n                        </div>\n\n                        <div class=\"custom-control custom-radio\">\n                            <input id=\"Kelvin to Celcius\" type=\"radio\" class=\"custom-control-input\" value=5\n                                name=\"temperature\" formControlName=\"temperature\">\n                            <label class=\"custom-control-label\" for=\"Kelvin to Celcius\">Kelvin to Celcius</label>\n                        </div>\n\n                        <div class=\"custom-control custom-radio\">\n                            <input id=\"Kelvin to Faranheit\" type=\"radio\" class=\"custom-control-input\" value=6\n                                name=\"temperature\" formControlName=\"temperature\">\n                            <label class=\"custom-control-label\" for=\"Kelvin to Faranheit\">Kelvin to Faranheit</label>\n                        </div>\n\n                        <div class=\"custom-control\">\n                            <div>\n                                <label>Enter temperature value to Convert :</label>\n                                <input id=\"temperature-input\" type=\"number\" formControlName=\"temperatureInput\" #temp>\n                            </div>\n                        </div>\n\n                        <div *ngIf=\"convertedValue\" class=\"custom-control\">\n                            <div>\n                                <label> Convert value : {{convertedValue}}</label>\n                            </div>\n                        </div>\n\n                        <div class=\"invalid-feedback\" *ngIf=\"isSubmitted && myForm.errors?.required\">\n                            <p>Please select either value</p>\n                        </div>\n                    </div>\n                </div>\n\n\n                <button type=\"submit\" class=\"btn btn-danger btn-lg btn-block\">Submit</button>\n            </form>\n\n        </div>\n    </div>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}