{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/shared/temperature-converter-service.service.ts","./src/app/temperature-coverter/temperature-coverter.component.ts","./src/app/temperature-coverter/temperature-coverter.component.html","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { TemperatureCoverterComponent } from './temperature-coverter/temperature-coverter.component';\n\n\nconst routes: Routes = [{ path: 'temperature-converter', component: TemperatureCoverterComponent }];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'temperature-coverter-web';\n}\n","<app-temperature-coverter></app-temperature-coverter>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { TemperatureCoverterComponent } from './temperature-coverter/temperature-coverter.component';\nimport { TemperatureConverterService } from './shared/temperature-converter-service.service';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TemperatureCoverterComponent\n  ],\n  imports: [\n    BrowserModule,\n    ReactiveFormsModule,\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TemperatureConverterService {\n  public baseUrl = 'http://localhost:51690/api/temperature';\n  constructor(public http: HttpClient) { }\n\n  public getConvertedValues(caseNumber: number, valueToConvert: number): Observable<any> {\n    return this.http.get(`${this.baseUrl}?caseValue=${caseNumber}&valueToConvert=${valueToConvert}`);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { TemperatureConverterService } from '../shared/temperature-converter-service.service';\n\n@Component({\n  selector: 'app-temperature-coverter',\n  templateUrl: './temperature-coverter.component.html',\n  styleUrls: ['./temperature-coverter.component.scss']\n})\nexport class TemperatureCoverterComponent implements OnInit {\n\n  isSubmitted = false;\n  tempratureForm: FormGroup;\n  convertedValue: number;\n\n  constructor(public fb: FormBuilder, public temperatureConverterService: TemperatureConverterService) {\n    this.tempratureForm = this.fb.group({\n      temperature: ['temperature', [Validators.required]],\n      temperatureInput: [[], [Validators.required]]\n    })\n\n  }\n\n  ngOnInit() { }\n\n\n\n  // Getter method to access form control\n  get myForm() {\n    return this.tempratureForm.get('temperature');\n  }\n\n  // Submit Form\n  public onSubmit() {\n    this.isSubmitted = true;\n    if (!this.tempratureForm.valid) {\n      return false;\n    } else {\n      // alert(JSON.stringify(this.tempratureForm.value))\n      this.temperatureConverterService.getConvertedValues(Number(this.tempratureForm.value.temperature), Number(this.tempratureForm.value.temperatureInput)).subscribe((convertedValue) => {\n        this.convertedValue = convertedValue;\n      });\n    }\n  }\n\n}\n","<div class=\"jumbotron text-center\">\n    <h1 class=\"display-5\">\n        Temperature Converter Angular Application\n    </h1>\n</div>\n\n<div class=\"container\">\n    <div class=\"row custom-wrapper\">\n        <div class=\"col-md-12\">\n\n            <form [formGroup]=\"tempratureForm\" (ngSubmit)=\"onSubmit()\">\n\n                <div class=\"group-gap\">\n                    <h5 class=\"mb-3\">Temperature type</h5>\n                    <div class=\"d-block my-3\">\n\n                        <div class=\"custom-control custom-radio\">\n                            <input id=\"Celcius to Faranheit\" type=\"radio\" class=\"custom-control-input\" value=1\n                                name=\"temperature\" formControlName=\"temperature\">\n                            <label class=\"custom-control-label\" for=\"Celcius to Faranheit\">Celcius to Faranheit</label>\n                        </div>\n\n                        <div class=\"custom-control custom-radio\">\n                            <input id=\"Celcius to Kelvin\" type=\"radio\" class=\"custom-control-input\" value=2\n                                name=\"temperature\" formControlName=\"temperature\">\n                            <label class=\"custom-control-label\" for=\"Celcius to Kelvin\">Celcius to Kelvin</label>\n                        </div>\n\n                        <div class=\"custom-control custom-radio\">\n                            <input id=\"Faranheit to Celcius\" type=\"radio\" class=\"custom-control-input\" value=3\n                                name=\"temperature\" formControlName=\"temperature\">\n                            <label class=\"custom-control-label\" for=\"Faranheit to Celcius\">Faranheit to Celcius</label>\n                        </div>\n\n                        <div class=\"custom-control custom-radio\">\n                            <input id=\"Faranheit to Kelvin\" type=\"radio\" class=\"custom-control-input\" value=4\n                                name=\"temperature\" formControlName=\"temperature\">\n                            <label class=\"custom-control-label\" for=\"Faranheit to Kelvin\">Faranheit to Kelvin</label>\n                        </div>\n\n                        <div class=\"custom-control custom-radio\">\n                            <input id=\"Kelvin to Celcius\" type=\"radio\" class=\"custom-control-input\" value=5\n                                name=\"temperature\" formControlName=\"temperature\">\n                            <label class=\"custom-control-label\" for=\"Kelvin to Celcius\">Kelvin to Celcius</label>\n                        </div>\n\n                        <div class=\"custom-control custom-radio\">\n                            <input id=\"Kelvin to Faranheit\" type=\"radio\" class=\"custom-control-input\" value=6\n                                name=\"temperature\" formControlName=\"temperature\">\n                            <label class=\"custom-control-label\" for=\"Kelvin to Faranheit\">Kelvin to Faranheit</label>\n                        </div>\n\n                        <div class=\"custom-control\">\n                            <div>\n                                <label>Enter temperature value to Convert :</label>\n                                <input id=\"temperature-input\" type=\"number\" formControlName=\"temperatureInput\" #temp>\n                            </div>\n                        </div>\n\n                        <div *ngIf=\"convertedValue\" class=\"custom-control\">\n                            <div>\n                                <label> Convert value : {{convertedValue}}</label>\n                            </div>\n                        </div>\n\n                        <div class=\"invalid-feedback\" *ngIf=\"isSubmitted && myForm.errors?.required\">\n                            <p>Please select either value</p>\n                        </div>\n                    </div>\n                </div>\n\n\n                <button type=\"submit\" class=\"btn btn-danger btn-lg btn-block\">Submit</button>\n            </form>\n\n        </div>\n    </div>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}